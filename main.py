import logging
import math
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from functools import lru_cache

from parse import parse_products
from utils import calculate_profit
from config import token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename='bot.log', format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ URL, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
class Form(StatesGroup):
    URL_CHOICE = State()
    PRODUCT_COUNT = State()
    SORT_CHOICE = State()

liked_products = []

@lru_cache(maxsize=128)
def get_products(url):
    return parse_products(url)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="1. –û–±–Ω–æ–≤–ª—è–π—Å—è"), types.KeyboardButton(text="2. –ú–µ–≥–∞ –≤—ã–≥–æ–¥–∞"), types.KeyboardButton(text="3. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å URL:", reply_markup=keyboard)
    await Form.URL_CHOICE.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É URL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ URL
@dp.message_handler(state=Form.URL_CHOICE)
async def url_choice(message: types.Message, state: FSMContext):
    url_choice = message.text

    url = ""
    if url_choice == '1. –û–±–Ω–æ–≤–ª—è–π—Å—è':
        url = "https://megamarket.ru/landing/obnovlyajsya/"
    elif url_choice == '2. –ú–µ–≥–∞ –≤—ã–≥–æ–¥–∞':
        url = "https://megamarket.ru/landing/megavygoda/"
    elif url_choice == '3. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞':
        url = "https://megamarket.ru/"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π URL
    await state.update_data(url=url)
    logging.info(f"–í—ã–±—Ä–∞–Ω URL: {url}")

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ URL: {url}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5).", reply_markup=types.ReplyKeyboardRemove())
    await Form.PRODUCT_COUNT.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(state=Form.PRODUCT_COUNT)
async def product_count(message: types.Message, state: FSMContext):
    try:
        product_count = int(message.text)
        await state.update_data(product_count=product_count)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=sort_keyboard())
        await Form.SORT_CHOICE.set()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
def sort_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ü–æ –∫–µ—à–±—ç–∫—É"), types.KeyboardButton(text="–ü–æ —Å–∫–∏–¥–∫–µ"), types.KeyboardButton(text="–ü–æ –ª–∏—á–Ω–æ–π –≤—ã–≥–æ–¥–µ"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@dp.message_handler(state=Form.SORT_CHOICE)
async def sort_choice(message: types.Message, state: FSMContext):
    choice = message.text.lower()
    data = await state.get_data()
    url = data.get('url')
    product_count = data.get('product_count', 5)

    if url:
        try:
            products = get_products(url)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∞–π—Ç–∞: {str(e)}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∞–π—Ç–∞: {str(e)}")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–µ—à–±—ç–∫–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        available_products = [product for product in products if product[1] != 'N/A' and product[2] != 'N/A']

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
        sorted_products = sort_products(choice, available_products)

        total_products = len(sorted_products)
        pages = math.ceil(total_products / product_count)

        await show_products(message, sorted_products, product_count, pages, state)

        await state.reset_state()

    else:
        await message.answer_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ URL —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
def sort_products(choice, available_products):
    if choice == '–ø–æ –∫–µ—à–±—ç–∫—É':
        sorted_products = sorted(available_products, key=lambda x: float(x[2].replace("‚ÇΩ", "").replace(" ", "")) if x[2] != 'N/A' else 0, reverse=True)
    elif choice == '–ø–æ —Å–∫–∏–¥–∫–µ':
        sorted_products = sorted(available_products, key=lambda x: (float(x[7].replace("‚ÇΩ", "").replace(" ", "")) if x[7] != 'N/A' and x[7].isdigit() else float('-inf'), x[7] == 'N/A'), reverse=True)
    elif choice == '–ø–æ –ª–∏—á–Ω–æ–π –≤—ã–≥–æ–¥–µ':
        sorted_products = sorted(available_products, key=lambda x: calculate_profit(x[2], x[1]), reverse=True)
    else:
        sorted_products = available_products

    return sorted_products

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def show_products(message, sorted_products, product_count, pages, state):
    page = 1
    per_page = product_count

    while True:
        start = (page - 1) * per_page
        end = start + per_page
        products_to_show = sorted_products[start:end]

        for i, product in enumerate(products_to_show, start=start+1):
            await send_product_info(message, product, i)

        if page == pages:
            ask_again = await message.answer("–ù—É–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç)")
            response = await dp.wait_for(lambda msg: msg.text.lower() in ['–¥–∞', '–Ω–µ—Ç'], timeout=60)
            if response.text.lower() == '–¥–∞':
                page = 1
                continue
            else:
                break

        page += 1
        if page <= pages:
            if pages > 1:
                page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages}."
            else:
                page_info = "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}"

            await message.answer(f"{page_info} –ù–∞–∂–º–∏—Ç–µ /next –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            response = await dp.wait_for(lambda msg: msg.text.lower() in ['/stop', '/next'], timeout=10)
            if response.text == '/stop':
                break
            elif response.text == '/next':
                if page == pages:
                    await message.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
                else:
                    continue
        else:
            break

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
async def send_product_info(message, product, index):
    name, amount, cashback, img, product_link, rating_count, rating_percentage, discont_elem, discont_text = product
    stars = "‚≠êÔ∏è" * int(rating_percentage / 18)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    discount, discount_message = calculate_discount(amount, discont_text)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–µ —Ç—Ä–∞—Ç—ã
    net_expenses, net_expenses_message = calculate_net_expenses(amount, cashback)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product_info = f"‚ñº–¢–æ–≤–∞—Ä {index}‚ñº:\n\n{name}\n\n‚ï†–¶–µ–Ω–∞: <b>{amount}</b>\n‚ï†–ö–µ—à–±–µ–∫(—Å–±–µ—Ä—Å–ø–∞—Å–∏–±–æ): <b>{cashback}</b>‚ö°Ô∏è\n\n‚ï†<b>{net_expenses_message}</b>\n‚ï†–û—Ç–∑—ã–≤–æ–≤: {rating_count}üë•\n‚ï†–û—Ü–µ–Ω–∫–∞: {stars}\n\n‚ï†<a href='{product_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n\n{discount_message}\n\n/like_{index} - –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    await message.answer_photo(photo=img, caption=product_info, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏
def calculate_discount(amount, discont_text):
    if discont_text and amount and discont_text != 'N/A' and amount != 'N/A':
        try:
            discount = float(discont_text.replace("‚ÇΩ", "").replace(" ", "")) - float(amount.replace("‚ÇΩ", "").replace(" ", ""))
            discount_message = f"‚ù§Ô∏è–°–ö–ò–î–ö–ê: {discount}‚ÇΩ\n‚ï†–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {discont_text}"
        except ValueError:
            discount = 0
            discount_message = "‚ù§Ô∏è–°–ö–ò–î–ö–ê: –ë–µ–∑ —Å–∫–∏–¥–∫–∏"
    else:
        discount = 0
        discount_message = "‚ù§Ô∏è–°–ö–ò–î–ö–ê: –ë–µ–∑ —Å–∫–∏–¥–∫–∏"

    return discount, discount_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ —á–∏—Å—Ç—ã—Ö —Ç—Ä–∞—Ç
def calculate_net_expenses(amount, cashback):
    try:
        net_expenses = float(amount.replace("‚ÇΩ", "").replace(" ", "")) - float(cashback.replace("‚ÇΩ", "").replace(" ", ""))
        net_expenses_message = f"–ß–∏—Å—Ç—ã–µ —Ç—Ä–∞—Ç—ã: {net_expenses}‚ÇΩ"
    except ValueError:
        net_expenses_message = ""

    return net_expenses, net_expenses_message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /like_
@dp.message_handler(lambda message: message.text.startswith('/like_'))
async def like_product(message: types.Message, state: FSMContext):
    product_index = int(message.text.split('_')[1]) - 1
    data = await state.get_data()
    url = data.get('url')
    products = get_products(url)
    if 0 <= product_index < len(products):
        liked_product = products[product_index]
        liked_products.append(liked_product)
        await message.answer(f"–¢–æ–≤–∞—Ä '{liked_product[0]}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        product_count = data.get('product_count', 5)
        total_products = len(products)
        pages = math.ceil(total_products / product_count)

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
        if pages > 1:
            remaining_pages = pages - (product_index // product_count) - 1
            if remaining_pages > 0:
                await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_pages} —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤.")
            else:
                await message.answer("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.")
        else:
            remaining_products = total_products - (product_index + 1)
            await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_products} —Ç–æ–≤–∞—Ä–æ–≤.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /liked
@dp.message_handler(commands=['liked'])
async def show_liked(message: types.Message):
    if not liked_products:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
    else:
        for i, product in enumerate(liked_products, start=1):
            await send_product_info(message, product, i)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)